(()=>{"use strict";const e=require("express"),a=require("sequelize"),t=require("bcrypt");let s=new a("postgresql://wip-g04_owner:XcO5mSVDN7CF@ep-long-haze-a436atvz.us-east-1.aws.neon.tech/wip-g04?sslmode=require"),r=(e=>{const s=e.define("User",{id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0},name:{type:a.DataTypes.STRING,allowNull:!1,unique:!0},email:{type:a.DataTypes.STRING,allowNull:!1,unique:!0},password:{type:a.DataTypes.STRING,allowNull:!1},phone:{type:a.DataTypes.STRING,allowNull:!0},profilePicture:{type:a.DataTypes.STRING,allowNull:!0}},{hooks:{beforeCreate:async e=>{e.password=await t.hash(e.password,10)},beforeUpdate:async e=>{e.changed("password")&&(e.password=await t.hash(e.password,10))},afterFind:(e,a)=>{e&&(e.profilePicture=`${process.env.BASE_URL}/public/${e?.profilePicture}`)}},instanceMethods:{validatePassword:async function(e){return await t.compare(e,this.password)}}});return s})(s),o=(e=>e.define("Restaurant",{id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0},title:{type:a.DataTypes.STRING,allowNull:!1,unique:!1},cousine:{type:a.DataTypes.ARRAY(a.DataTypes.STRING),allowNull:!0,unique:!1},description:{type:a.DataTypes.TEXT("medium"),allowNull:!0},expensiveRating:{type:a.DataTypes.INTEGER,allowNull:!1,validate:{min:1,max:3}},location:{type:a.DataTypes.JSON,allowNull:!0},images:{type:a.DataTypes.ARRAY(a.DataTypes.STRING),allowNull:!1}},{hooks:{afterFind:async(e,a)=>{const t=async e=>(e.images=e.images.map((e=>`${process.env.BASE_URL}/public/${e}`)),e);return Array.isArray(e)?Promise.all(e.map(t)):e?t(e):void 0}}}))(s),n=(e=>e.define("Menu",{id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0},menuItem:{type:a.DataTypes.STRING,allowNull:!1},description:{type:a.DataTypes.TEXT("medium"),allowNull:!0},price:{type:a.DataTypes.DECIMAL(6,2),allowNull:!0},images:{type:a.DataTypes.ARRAY(a.DataTypes.STRING),allowNull:!0},type:{type:a.DataTypes.ENUM("Food","Beverage"),allowNull:!0},calories:{type:a.DataTypes.INTEGER,allowNull:!0}}))(s),l=(e=>e.define("Rating",{id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0},rating:{type:a.DataTypes.INTEGER,allowNull:!1,validate:{min:1,max:5}},review:{type:a.DataTypes.TEXT("medium"),allowNull:!1},ratableType:{type:a.DataTypes.STRING,allowNull:!1},ratableId:{type:a.DataTypes.INTEGER,allowNull:!1}}))(s),i=(e=>e.define("Booking",{id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0},customer:{type:a.DataTypes.JSON,allowNull:!1},guests:{type:a.DataTypes.INTEGER,allowNull:!0},specialAccomodations:{type:a.DataTypes.JSON,allowNull:!0},eventSpecial:{type:a.DataTypes.TEXT("medium"),allowNull:!1},loadIn:{type:a.DataTypes.DATE,allowNull:!1},loadOut:{type:a.DataTypes.DATE,allowNull:!1,validate:{isAfterLoadin(e){if(e<=this.loadin)throw new Error("Loadout time must be after loadin time.")}}},note:{type:a.DataTypes.TEXT("medium"),allowNull:!0}}))(s),u=(e=>e.define("Tables",{id:{type:a.DataTypes.INTEGER,primaryKey:!0,autoIncrement:!0},seats:{type:a.DataTypes.INTEGER,allowNull:!1,unique:!1},tableCount:{type:a.DataTypes.INTEGER,allowNull:!1,unique:!1},place:{type:a.DataTypes.STRING,allowNull:!1}}))(s);o.hasMany(n),n.belongsTo(o),o.hasMany(l),n.hasMany(l),r.hasMany(i),i.belongsTo(r),o.hasMany(i),i.belongsTo(o),o.hasMany(u),u.belongsTo(o),u.hasMany(i),i.belongsTo(u),l.belongsTo(o,{as:"restaurant",foreignKey:"ratableId",constraints:!1}),l.belongsTo(n,{as:"menu",foreignKey:"ratableId",constraints:!1}),require("path");const p=require("body-parser"),c=(require("dotenv/config"),require("jsonwebtoken"));let y=e=>c.sign({id:e.id},process.env.JWT_SECRET||"WIP_GROUP05_BOOK_MY_SEAT_MOBILE_APP",{expiresIn:process.env.JWT_EXPIRATION||"60d"}),d=async(e,a,t)=>{try{const s=e.headers.authorization?.split(" ")[1];if(!s)return a.status(401).json({message:"No token provided"});const o=(e=>{try{return c.verify(e,process.env.JWT_SECRET||"WIP_GROUP05_BOOK_MY_SEAT_MOBILE_APP")}catch(e){return null}})(s);if(!o)return a.status(401).json({message:"Invalid token"});const n=await r.findByPk(o.id);if(!n)return a.status(401).json({message:"User not found"});e.user=n,t()}catch(e){console.error("Authentication error:",e),a.status(500).json({message:"Internal server error"})}},m=e.Router({mergeParams:!0});m.get("/",d,(async(e,a)=>{let t=e.user.id,s=await i.findAll({where:{UserId:t},include:[{model:o,attributes:["id","title","location","images"],hooks:{afterFind:!0}}]});return s.forEach((e=>{e.Restaurant&&(e.Restaurant.images=`${process.env.BASE_URL}/public/${e.Restaurant.images[0]}`)})),console.log(s),a.json(s)})),m.post("/",d,(async(e,t)=>{try{let s=e.body;console.log(s),s.specialAccomodations={},s.UserId=e.user.id;let r=await u.findOne({group:["id"],having:{seats:{[a.Op.gte]:s.guests}},order:[["seats","ASC"]]});console.log(r),s.TableId=r.id,console.log(`Booking:  ${JSON.stringify(s)}`);let o=await i.create(s);t.status(201).json(o)}catch(e){console.error("Error booking restaurant",e),t.status(400).json({message:"Failed to create booking data"})}}));const T=m;let g=e.Router();g.get("/"),g.post("/register",(async(e,a)=>{try{let{email:t,password:s,name:o,phone:n,profilePicture:l}=e.body;if(!(e=>/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e))(t))return a.status(400).json({message:"Invalid email format"});if(!(e=>/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\W_]).{8,}$/.test(e))(s))return a.status(400).json({message:"Password must be at least 8 characters long, contain at least 1 lowercase letter, 1 uppercase letter, 1 digit, and 1 special character"});if(await r.findOne({where:{email:t}}))return a.status(400).json({message:"Email already in use"});let i=await r.create({email:t,password:s,name:o,phone:n,profilePicture:l}),u=y(i);a.status(201).json({user:i,token:u})}catch(e){console.error("Registration error:",e),a.status(400).json({message:"Registration failed"})}})),g.post("/login",(async(e,a)=>{try{let{email:s,password:o}=e.body,n=await r.findOne({where:{email:s}});if(!n||!await t.compare(o,n.password))return a.status(401).json({message:"Invalid credentials"});let l=y(n);a.json({user:n,token:l})}catch(e){console.error("Login error:",e),a.status(500).json({message:"Internal server error"})}})),g.get("/profile",d,((e,a)=>{a.json({user:e.user})}));const w=g;let N=e.Router({mergeParams:!0});N.post("/",(async(e,a)=>{try{let{restaurant_id:t}=e.params,{tables:s}=e.body;const r=s.map((e=>({...e,RestaurantId:t})));let o=await u.bulkCreate(r);a.status(201).json(o)}catch(e){a.status(500).json({error:e.message})}})),N.put("/:id",(async(e,a)=>{try{let{seats:t,tableCount:s,place:r}=e.body,[o]=await u.update({seats:t,tableCount:s,place:r},{where:{id:e.params.id}});if(0===o)return a.status(404).json({error:"Table not found"});let n=await u.findByPk(e.params.id);a.status(200).json(n)}catch(e){a.status(500).json({error:e.message})}})),N.delete("/:id",(async(e,a)=>{try{if(0===await u.destroy({where:{id:e.params.id}}))return a.status(404).json({error:"Table not found"});a.status(200).json({message:"Table deleted successfully"})}catch(e){a.status(500).json({error:e.message})}}));const h=N;let f=e.Router();f.get("/",(async(e,a)=>{try{var t;e.query.lat,e.query.lng,t=await o.findAll(),a.json(t)}catch(e){console.error("Error fetching restaurants:",e),a.status(500).json({message:"Internal server error"})}})),f.get("/:id",(async(e,a)=>{try{let t=e.params.id,s=await o.findByPk(t);if(!s)return a.status(404).json({message:"Restaurant not found"});a.json(s)}catch(e){console.error("Error fetching restaurant:",e),a.status(500).json({message:"Internal server error"})}})),f.post("/",(async(e,a)=>{try{e.body.location=JSON.parse(e.body.location),e.body.images=JSON.parse(e.body.images),e.body.cousine=JSON.parse(e.body.cousine);let t=await o.create(e.body);a.status(201).json(t)}catch(e){console.error("Error creating restaurant:",e),a.status(400).json({message:"Failed to create restaurant"})}})),f.put("/:id",(async(e,a)=>{try{let t=e.params.id,[s,[r]]=await o.update(e.body,{where:{id:t}});if(0===s)return a.status(404).json({message:"Restaurant not found"});a.json(r)}catch(e){console.error("Error updating restaurant:",e),a.status(500).json({message:"Internal server error"})}})),f.patch("/:id",(async(e,a)=>{try{let t=e.params.id,[s,[r]]=await o.update(e.body,{where:{id:t}});if(0===s)return a.status(404).json({message:"Restaurant not found"});a.json(r)}catch(e){console.error("Error updating restaurant:",e),a.status(500).json({message:"Internal server error"})}})),f.delete("/:id",(async(e,a)=>{try{let t=e.params.id;if(0===await o.destroy({where:{id:t}}))return a.status(404).json({message:"Restaurant not found"});a.json({message:"Restaurant deleted successfully"})}catch(e){console.error("Error deleting restaurant:",e),a.status(500).json({message:"Internal server error"})}})),f.use("/:restaurant_id/tables",h);const R=f;let E=e.Router();E.use("/bookings",T),E.use("/user",w),E.use("/restaurants",R),E.get("/",d,((e,a)=>a.send({message:"checking auth",user:e.user})));const I=E,b=require("cors"),D=require("serverless-http");let j=e();process.env.PORT,j.use(e.json()),j.use(p.urlencoded({extended:!0})),I.use(p.json()),j.use(b()),j.use("/public",e.static("public")),j.get("/",((e,a,t)=>{a.send({Base:process.env.BASE_URL,Port:process.env.PORT})})),j.use("/api",I),async function(){try{await s.authenticate(),console.log("Database connection has been established successfully."),await s.sync()}catch(e){console.error("Unable to start the server:",e)}}(),D(j)})();